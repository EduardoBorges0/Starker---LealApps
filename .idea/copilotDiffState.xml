<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/data/network/firebase/ExerciseNetwork.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/data/network/firebase/ExerciseNetwork.kt" />
              <option name="originalContent" value="package com.app.starker.data.network.firebase&#10;&#10;import android.net.Uri&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.DocumentReference&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class ExerciseNetwork {&#10;    private val firestoreInstance = FirebaseFirestore.getInstance()&#10;    private val uid = FirebaseAuth.getInstance().uid ?: &quot;&quot;&#10;    private val storageInstance = FirebaseStorage.getInstance()&#10;&#10;    // Cria um exercício na subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun createExercise(workoutId: String, exercise: ExerciseModel): String? {&#10;        val docRef = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document()&#10;        val exerciseWithId = exercise.copy(id = docRef.id)&#10;        docRef.set(exerciseWithId).await()&#10;        return docRef.id&#10;    }&#10;&#10;    // Deleta um exercício da subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document(exerciseId)&#10;            .delete().await()&#10;    }&#10;&#10;    // Atualiza um exercício na subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun updateExercise(workoutId: String, exercise: ExerciseModel) {&#10;        firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document(exercise.id)&#10;            .set(exercise).await()&#10;    }&#10;&#10;    // Busca todos os exercícios de um Workout&#10;    suspend fun getEveryExercise(workoutId: String): List&lt;ExerciseModel&gt; {&#10;        val snapshot = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;)&#10;            .get().await()&#10;        return snapshot.toObjects(ExerciseModel::class.java)&#10;    }&#10;&#10;    // Busca um exercício pelo id&#10;    suspend fun getExerciseById(workoutId: String, exerciseId: String): ExerciseModel? {&#10;        val doc = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document(exerciseId)&#10;            .get().await()&#10;        return doc.toObject(ExerciseModel::class.java)&#10;    }&#10;&#10;    // Faz upload da imagem do exercício para o Firebase Storage e retorna a URL&#10;    suspend fun uploadExerciseImage(workoutId: String, exerciseId: String, imageUri: Uri): String {&#10;        val storageRef = storageInstance.reference&#10;            .child(&quot;$uid/$workoutId/$exerciseId&quot;)&#10;        storageRef.putFile(imageUri).await()&#10;        return storageRef.downloadUrl.await().toString()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.app.starker.data.network.firebase&#10;&#10;import android.net.Uri&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.DocumentReference&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class ExerciseNetwork {&#10;    private val firestoreInstance = FirebaseFirestore.getInstance()&#10;    private val uid = FirebaseAuth.getInstance().uid ?: &quot;&quot;&#10;    private val storageInstance = FirebaseStorage.getInstance()&#10;&#10;    // Cria um exercício na subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun createExercise(workoutId: String, exercise: ExerciseModel): String? {&#10;        val docRef = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document()&#10;        val exerciseWithId = exercise.copy(id = docRef.id)&#10;        docRef.set(exerciseWithId).await()&#10;        return docRef.id&#10;    }&#10;&#10;    // Deleta um exercício da subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document(exerciseId)&#10;            .delete().await()&#10;    }&#10;&#10;    // Atualiza um exercício na subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun updateExercise(workoutId: String, exercise: ExerciseModel) {&#10;        firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document(exercise.id)&#10;            .set(exercise).await()&#10;    }&#10;&#10;    // Busca todos os exercícios de um Workout&#10;    suspend fun getEveryExercise(workoutId: String): List&lt;ExerciseModel&gt; {&#10;        val snapshot = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;)&#10;            .get().await()&#10;        return snapshot.toObjects(ExerciseModel::class.java)&#10;    }&#10;&#10;    // Busca um exercício pelo id&#10;    suspend fun getExerciseById(workoutId: String, exerciseId: String): ExerciseModel? {&#10;        val doc = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;).document(exerciseId)&#10;            .get().await()&#10;        return doc.toObject(ExerciseModel::class.java)&#10;    }&#10;&#10;    // Faz upload da imagem do exercício para o Firebase Storage e retorna a URL&#10;    suspend fun uploadExerciseImage(workoutId: String, exerciseId: String, imageUri: Uri): String {&#10;        val storageRef = storageInstance.reference&#10;            .child(&quot;$uid/$workoutId/$exerciseId&quot;)&#10;        storageRef.putFile(imageUri).await()&#10;        return storageRef.downloadUrl.await().toString()&#10;    }&#10;&#10;    // Deleta todos os exercícios da subcoleção &quot;Exercises&quot; de um Workout&#10;    suspend fun deleteAllExercises(workoutId: String) {&#10;        val exercisesRef = firestoreInstance&#10;            .collection(&quot;Users&quot;).document(uid)&#10;            .collection(&quot;Workout&quot;).document(workoutId)&#10;            .collection(&quot;Exercises&quot;)&#10;        val snapshot = exercisesRef.get().await()&#10;        snapshot.documents.forEach { it.reference.delete().await() }&#10;    }&#10;&#10;    // Deleta a imagem de um exercício específico no Storage (uid/workoutId/exerciseId)&#10;    suspend fun deleteExerciseImage(workoutId: String, exerciseId: String) {&#10;        val storageRef = storageInstance.reference.child(&quot;$uid/$workoutId/$exerciseId&quot;)&#10;        storageRef.delete().await()&#10;    }&#10;&#10;    // Deleta todas as imagens da pasta de um workout no Storage (uid/workoutId)&#10;    suspend fun deleteAllImagesFromWorkout(workoutId: String) {&#10;        val workoutFolderRef = storageInstance.reference.child(&quot;$uid/$workoutId&quot;)&#10;        val items = workoutFolderRef.listAll().await()&#10;        items.items.forEach { it.delete().await() }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/data/repositoriesImpl/ExerciseRepositoriesImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/data/repositoriesImpl/ExerciseRepositoriesImpl.kt" />
              <option name="originalContent" value="package com.app.starker.data.repositoriesImpl&#10;&#10;import android.net.Uri&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.data.network.firebase.ExerciseNetwork&#10;import com.app.starker.domain.repositories.ExerciseRepositories&#10;import com.google.firebase.firestore.DocumentReference&#10;import javax.inject.Inject&#10;&#10;class ExerciseRepositoriesImpl @Inject constructor(private val exerciseNetwork: ExerciseNetwork) :&#10;    ExerciseRepositories {&#10;    override suspend fun createExercise(&#10;        workoutId: String,&#10;        exercise: ExerciseModel&#10;    ): DocumentReference {&#10;        return exerciseNetwork.createExercise(workoutId, exercise)&#10;    }&#10;&#10;    override suspend fun editExercise(&#10;        workoutId: String,&#10;        exerciseId: String,&#10;        updatedExercise: ExerciseModel&#10;    ) {&#10;        exerciseNetwork.editExercise(workoutId, exerciseId, updatedExercise)&#10;    }&#10;&#10;    override suspend fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        exerciseNetwork.deleteExercise(workoutId, exerciseId)&#10;    }&#10;&#10;    override suspend fun getAllExercises(workoutId: String): List&lt;ExerciseModel&gt; {&#10;        return exerciseNetwork.getAllExercises(workoutId)&#10;    }&#10;&#10;    override suspend fun getExerciseById(&#10;        workoutId: String,&#10;        exerciseId: String&#10;    ): ExerciseModel? {&#10;        return exerciseNetwork.getExerciseById(workoutId, exerciseId)&#10;    }&#10;&#10;    override fun uploadImageAndReturnUrl(&#10;        imageUri: Uri,&#10;        documentId: String,&#10;        onSuccess: (String) -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        exerciseNetwork.uploadImageAndReturnUrl(imageUri, documentId, onSuccess, onFailure)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.data.repositoriesImpl&#10;&#10;import android.net.Uri&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.data.network.firebase.ExerciseNetwork&#10;import com.app.starker.domain.repositories.ExerciseRepositories&#10;import javax.inject.Inject&#10;&#10;class ExerciseRepositoriesImpl @Inject constructor(private val exerciseNetwork: ExerciseNetwork) :&#10;    ExerciseRepositories {&#10;&#10;    override suspend fun createExercise(&#10;        workoutId: String,&#10;        exercise: ExerciseModel&#10;    ): String? {&#10;        return exerciseNetwork.createExercise(workoutId, exercise)&#10;    }&#10;&#10;    override suspend fun editExercise(&#10;        workoutId: String,&#10;        exerciseId: String,&#10;        updatedExercise: ExerciseModel&#10;    ) {&#10;        // Cria uma cópia do exercício com o id correto&#10;        val exerciseWithId = updatedExercise.copy(id = exerciseId)&#10;        exerciseNetwork.updateExercise(workoutId, exerciseWithId)&#10;    }&#10;&#10;    override suspend fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        exerciseNetwork.deleteExercise(workoutId, exerciseId)&#10;    }&#10;&#10;    override suspend fun getAllExercises(workoutId: String): List&lt;ExerciseModel&gt; {&#10;        return exerciseNetwork.getEveryExercise(workoutId)&#10;    }&#10;&#10;    override suspend fun getExerciseById(&#10;        workoutId: String,&#10;        exerciseId: String&#10;    ): ExerciseModel? {&#10;        return exerciseNetwork.getExerciseById(workoutId, exerciseId)&#10;    }&#10;&#10;    suspend fun uploadExerciseImage(&#10;        workoutId: String,&#10;        exerciseId: String,&#10;        imageUri: Uri&#10;    ): String {&#10;        return exerciseNetwork.uploadExerciseImage(workoutId, exerciseId, imageUri)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/domain/repositories/ExerciseRepositories.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/domain/repositories/ExerciseRepositories.kt" />
              <option name="originalContent" value="package com.app.starker.domain.repositories&#10;&#10;import android.net.Uri&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.google.firebase.firestore.DocumentReference&#10;&#10;interface ExerciseRepositories {&#10;    suspend fun createExercise(workoutId: String, exercise: ExerciseModel): DocumentReference;&#10;    suspend fun editExercise(workoutId: String, exerciseId: String, updatedExercise: ExerciseModel)&#10;    suspend fun deleteExercise(workoutId: String, exerciseId: String)&#10;    suspend fun getAllExercises(workoutId: String): List&lt;ExerciseModel&gt;&#10;    suspend fun getExerciseById(workoutId: String, exerciseId: String): ExerciseModel?&#10;    fun uploadImageAndReturnUrl(&#10;        imageUri: Uri,&#10;        documentId: String,&#10;        onSuccess: (String) -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.app.starker.domain.repositories&#10;&#10;import android.net.Uri&#10;import com.app.starker.data.model.ExerciseModel&#10;&#10;interface ExerciseRepositories {&#10;    suspend fun createExercise(workoutId: String, exercise: ExerciseModel): String?&#10;    suspend fun editExercise(workoutId: String, exerciseId: String, updatedExercise: ExerciseModel)&#10;    suspend fun deleteExercise(workoutId: String, exerciseId: String)&#10;    suspend fun getAllExercises(workoutId: String): List&lt;ExerciseModel&gt;&#10;    suspend fun getExerciseById(workoutId: String, exerciseId: String): ExerciseModel?&#10;    suspend fun uploadExerciseImage(workoutId: String, exerciseId: String, imageUri: Uri): String&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/ExerciseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/ExerciseViewModel.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.data.network.firebase.ExerciseNetwork&#10;import com.app.starker.domain.repositories.ExerciseRepositories&#10;import com.app.starker.domain.useCase.InsertWorkoutUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExerciseViewModel @Inject constructor(&#10;    private val exerciseRepositories: ExerciseRepositories,&#10;    private val insertWorkoutUseCase: InsertWorkoutUseCase&#10;) : ViewModel() {&#10;    private val _isImageError = MutableStateFlow&lt;Boolean&gt;(false)&#10;    val isImageError : StateFlow&lt;Boolean&gt; = _isImageError&#10;&#10;    private val _isNavigate = MutableStateFlow&lt;Boolean&gt;(false)&#10;    val isNavigate : StateFlow&lt;Boolean&gt; = _isNavigate&#10;&#10;    private val _isLoading = MutableStateFlow&lt;Boolean&gt;(false)&#10;    val isLoading : StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.deleteExercise(workoutId, exerciseId)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun editExercise(workoutId: String, exerciseId: String, updatedExercise: ExerciseModel) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getAllExercises(workoutId: String, onResult: (List&lt;ExerciseModel&gt;) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercises = exerciseRepositories.getAllExercises(workoutId)&#10;                onResult(exercises)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getExerciseById(workoutId: String, exerciseId: String, onResult: (ExerciseModel?) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercise = exerciseRepositories.getExerciseById(workoutId, exerciseId)&#10;                onResult(exercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createExerciseWithImage(&#10;        workoutId: String,&#10;        exercise: ExerciseModel,&#10;        imageUri: Uri,&#10;        onResult: (String?) -&gt; Unit&#10;    ) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exerciseId = exerciseRepositories.createExercise(workoutId, exercise.copy(image = &quot;&quot;))&#10;                if (exerciseId != null) {&#10;                    val imageUrl = exerciseRepositories.uploadExerciseImage(workoutId, exerciseId, imageUri)&#10;                    val updatedExercise = exercise.copy(id = exerciseId, image = imageUrl)&#10;                    exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;                    onResult(exerciseId)&#10;                } else {&#10;                    onResult(null)&#10;                }&#10;            } catch (e: Exception) {&#10;                onResult(null)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.data.network.firebase.ExerciseNetwork&#10;import com.app.starker.domain.repositories.ExerciseRepositories&#10;import com.app.starker.domain.useCase.InsertWorkoutUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExerciseViewModel @Inject constructor(&#10;    private val exerciseRepositories: ExerciseRepositories,&#10;    private val insertWorkoutUseCase: InsertWorkoutUseCase&#10;) : ViewModel() {&#10;    private val _isImageError = MutableStateFlow(false)&#10;    val isImageError: StateFlow&lt;Boolean&gt; = _isImageError&#10;&#10;    private val _isNavigate = MutableStateFlow(false)&#10;    val isNavigate: StateFlow&lt;Boolean&gt; = _isNavigate&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.deleteExercise(workoutId, exerciseId)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun editExercise(workoutId: String, exerciseId: String, updatedExercise: ExerciseModel) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getAllExercises(workoutId: String, onResult: (List&lt;ExerciseModel&gt;) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercises = exerciseRepositories.getAllExercises(workoutId)&#10;                onResult(exercises)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getExerciseById(workoutId: String, exerciseId: String, onResult: (ExerciseModel?) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercise = exerciseRepositories.getExerciseById(workoutId, exerciseId)&#10;                onResult(exercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createExerciseWithImage(&#10;        workoutId: String,&#10;        exercise: ExerciseModel,&#10;        imageUri: Uri,&#10;        onResult: (String?) -&gt; Unit&#10;    ) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _isNavigate.value = false&#10;            try {&#10;                val exerciseId = exerciseRepositories.createExercise(workoutId, exercise.copy(image = &quot;&quot;))&#10;                if (exerciseId != null) {&#10;                    val imageUrl = exerciseRepositories.uploadExerciseImage(workoutId, exerciseId, imageUri)&#10;                    val updatedExercise = exercise.copy(id = exerciseId, image = imageUrl)&#10;                    exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;                    _isNavigate.value = true&#10;                    onResult(exerciseId)&#10;                } else {&#10;                    _isNavigate.value = false&#10;                    onResult(null)&#10;                }&#10;            } catch (e: Exception) {&#10;                _isNavigate.value = false&#10;                onResult(null)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/FormInsertExerciseView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/FormInsertExerciseView.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.app.starker.presentation.common.view.CustomTextField&#10;&#10;@Composable&#10;fun FormInsertExerciseView(&#10;    text: String,&#10;    name: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    observation: String,&#10;    onObservationChange: (String) -&gt; Unit,&#10;    imageUri: Uri?,&#10;    onPickImage: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    errorMessage: String? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(modifier = modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 4.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = text,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            CustomTextField(&#10;                value = name,&#10;                onValueChange = onNameChange,&#10;                placeholder = &quot;Nome do exercício&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            CustomTextField(&#10;                value = observation,&#10;                onValueChange = onObservationChange,&#10;                placeholder = &quot;Observação&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            Button(&#10;                onClick = onPickImage,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 40.dp)&#10;                    .height(60.dp),&#10;                shape = RoundedCornerShape(8.dp)&#10;            ) {&#10;                Text(&quot;Selecionar Imagem&quot;, color = MaterialTheme.colorScheme.secondary)&#10;            }&#10;&#10;            imageUri?.let {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(it),&#10;                    contentDescription = &quot;Imagem selecionada&quot;,&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = onSave,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(80.dp)&#10;                .align(Alignment.BottomCenter),&#10;            shape = RoundedCornerShape(0.dp)&#10;        ) {&#10;            Text(&quot;Salvar Exercício&quot;, color = MaterialTheme.colorScheme.secondary)&#10;        }&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.app.starker.R&#10;import com.app.starker.presentation.common.view.CustomTextField&#10;&#10;@Composable&#10;fun FormInsertExerciseView(&#10;    text: String,&#10;    name: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    observation: String,&#10;    onObservationChange: (String) -&gt; Unit,&#10;    imageUri: Uri?,&#10;    onPickImage: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    errorMessage: String? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(modifier = modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 4.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = text,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            CustomTextField(&#10;                value = name,&#10;                onValueChange = onNameChange,&#10;                placeholder = stringResource(R.string.exercise_name_placeholder)&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            CustomTextField(&#10;                value = observation,&#10;                onValueChange = onObservationChange,&#10;                placeholder = stringResource(R.string.exercise_observation_placeholder)&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            Button(&#10;                onClick = onPickImage,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 40.dp)&#10;                    .height(60.dp),&#10;                shape = RoundedCornerShape(8.dp)&#10;            ) {&#10;                Text(stringResource(R.string.select_image), color = MaterialTheme.colorScheme.secondary)&#10;            }&#10;&#10;            imageUri?.let {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(it),&#10;                    contentDescription = stringResource(R.string.selected_image_content_description),&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = onSave,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(80.dp)&#10;                .align(Alignment.BottomCenter),&#10;            shape = RoundedCornerShape(0.dp)&#10;        ) {&#10;            Text(stringResource(R.string.save_exercise), color = MaterialTheme.colorScheme.secondary)&#10;        }&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/InsertExerciseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/InsertExerciseScreen.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.app.starker.R&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.presentation.common.view.CustomTextField&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun InsertExerciseScreen(&#10;    workoutId: String,&#10;    onExerciseInserted: () -&gt; Unit,&#10;    viewModel: InsertExerciseViewModel = hiltViewModel()&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;&#10;    // Navegação controlada pelo estado do ViewModel&#10;    LaunchedEffect(isNavigate) {&#10;        if (isNavigate) {&#10;            onExerciseInserted()&#10;        }&#10;    }&#10;&#10;&#10;    InsertExerciseScreenContent(&#10;        name = name,&#10;        onNameChange = { name = it },&#10;        observation = observation,&#10;        onObservationChange = { observation = it },&#10;        imageUri = imageUri,&#10;        onPickImage = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;        onSave = {&#10;            if (name.isBlank() || imageUri == null) {&#10;                errorMessage = &quot;Preencha o nome e selecione uma imagem.&quot;&#10;                return@InsertExerciseScreenContent&#10;            }&#10;            errorMessage = null&#10;            viewModel.createExerciseWithImage(&#10;                workoutId = workoutId,&#10;                exercise = ExerciseModel(&#10;                    name = name,&#10;                    observation = observation&#10;                ),&#10;                imageUri = imageUri!!,&#10;                onResult = { id -&gt;&#10;                    if (id == null) {&#10;                        errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        errorMessage = errorMessage,&#10;        isLoading = isLoading,&#10;        onBack = onExerciseInserted&#10;    )&#10;}&#10;&#10;@Composable&#10;fun InsertExerciseScreenContent(&#10;    name: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    observation: String,&#10;    onObservationChange: (String) -&gt; Unit,&#10;    imageUri: Uri?,&#10;    onPickImage: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    errorMessage: String?,&#10;    isLoading: Boolean,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        TopAppBar(&#10;            title = {},&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.background&#10;            ),&#10;            navigationIcon = {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                    contentDescription = stringResource(R.string.back_button_description),&#10;                    modifier = Modifier&#10;                        .padding(start = 32.dp, top = 32.dp)&#10;                        .clickable { onBack() }&#10;                )&#10;            },&#10;            modifier = Modifier.background(Color.Blue)&#10;        )&#10;        FormInsertExerciseView(&#10;            name = name,&#10;            onNameChange = onNameChange,&#10;            observation = observation,&#10;            onObservationChange = onObservationChange,&#10;            imageUri = imageUri,&#10;            onPickImage = onPickImage,&#10;            onSave = onSave,&#10;            errorMessage = errorMessage&#10;        )&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FormInsertExerciseView(&#10;    name: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    observation: String,&#10;    onObservationChange: (String) -&gt; Unit,&#10;&#10;            CustomTextField(&#10;                value = name,&#10;                onValueChange = { name = it },&#10;                placeholder = &quot;Nome do exercício&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            CustomTextField(&#10;                value = observation,&#10;                onValueChange = { observation = it },&#10;                placeholder = &quot;Observação&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            Button(&#10;                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                modifier = Modifier.fillMaxWidth().padding(horizontal = 40.dp).height(60.dp),&#10;                shape = RoundedCornerShape(8.dp)&#10;            ) {&#10;                Text(&quot;Selecionar Imagem&quot;, color = MaterialTheme.colorScheme.secondary)&#10;            }&#10;&#10;            imageUri?.let {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(it),&#10;                    contentDescription = &quot;Imagem selecionada&quot;,&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                if (name.isBlank() || imageUri == null) {&#10;                    errorMessage = &quot;Preencha o nome e selecione uma imagem.&quot;&#10;                    return@Button&#10;                }&#10;                errorMessage = null&#10;                viewModel.createExerciseWithImage(&#10;                    workoutId = workoutId,&#10;                    exercise = ExerciseModel(&#10;                        name = name,&#10;                        observation = observation&#10;                    ),&#10;                    imageUri = imageUri!!,&#10;                    onResult = { id -&gt;&#10;                        if (id == null) {&#10;                            errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                        }else{&#10;&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(80.dp)&#10;                .align(Alignment.BottomCenter),&#10;            shape = RoundedCornerShape(0.dp)&#10;        ) {&#10;            Text(&quot;Salvar Exercício&quot;, color = MaterialTheme.colorScheme.secondary)&#10;        }&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.app.starker.R&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.presentation.common.view.CustomTextField&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun InsertExerciseScreen(&#10;    workoutId: String,&#10;    onExerciseInserted: () -&gt; Unit,&#10;    viewModel: InsertExerciseViewModel = hiltViewModel()&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;&#10;    // Navegação controlada pelo estado do ViewModel&#10;    LaunchedEffect(isNavigate) {&#10;        if (isNavigate) {&#10;            onExerciseInserted()&#10;        }&#10;    }&#10;&#10;    if (isLoading) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 24.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Adicionar Exercício&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            CustomTextField(&#10;                value = name,&#10;                onValueChange = { name = it },&#10;                placeholder = &quot;Nome do exercício&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            CustomTextField(&#10;                value = observation,&#10;                onValueChange = { observation = it },&#10;                placeholder = &quot;Observação&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            Button(&#10;                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Selecionar Imagem&quot;)&#10;            }&#10;&#10;            imageUri?.let {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(it),&#10;                    contentDescription = &quot;Imagem selecionada&quot;,&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                if (name.isBlank() || imageUri == null) {&#10;                    errorMessage = &quot;Preencha o nome e selecione uma imagem.&quot;&#10;                    return@Button&#10;                }&#10;                errorMessage = null&#10;                viewModel.createExerciseWithImage(&#10;                    workoutId = workoutId,&#10;                    exercise = ExerciseModel(&#10;                        name = name,&#10;                        observation = observation&#10;                    ),&#10;                    imageUri = imageUri!!,&#10;                    onResult = { id -&gt;&#10;                        if (id == null) {&#10;                            errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(80.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = 24.dp, vertical = 24.dp)&#10;        ) {&#10;            Text(&quot;Salvar Exercício&quot;, color = MaterialTheme.colorScheme.secondary)&#10;        }&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/insertExercise/InsertExerciseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/insertExercise/InsertExerciseScreen.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises.insertExercise&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;import com.app.starker.presentation.common.view.TopBarView&#10;import com.app.starker.presentation.exercises.FormInsertExerciseView&#10;import com.app.starker.presentation.exercises.insertExercise.InsertExerciseViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun InsertExerciseScreen(&#10;    workoutId: String,&#10;    navHostController: NavHostController,&#10;    viewModel: InsertExerciseViewModel = hiltViewModel()&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;&#10;    // Navegação controlada pelo estado do ViewModel&#10;    LaunchedEffect(isNavigate) {&#10;        if (isNavigate) {&#10;            navHostController.popBackStack()&#10;        }&#10;    }&#10;&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        TopBarView(navHostController)&#10;        FormInsertExerciseView(&#10;            text = &quot;Adicionar Exercício&quot;,&#10;            name = name,&#10;            onNameChange = { name = it },&#10;            observation = observation,&#10;            onObservationChange = { observation = it },&#10;            imageUri = imageUri,&#10;            onPickImage = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;            onSave = {&#10;                if (name.isBlank() || observation.isBlank()) {&#10;                    errorMessage = &quot;Erros: Preencha todos os campos.&quot;&#10;                } else {&#10;                    viewModel.createExerciseWithImage(&#10;                        workoutId = workoutId,&#10;                        exercise = ExerciseModel(&#10;                            name = name,&#10;                            observation = observation&#10;                        ),&#10;                        imageUri = imageUri!!,&#10;                        onResult = { id -&gt;&#10;                            if (id == null) {&#10;                                errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                            }&#10;                        }&#10;                    )&#10;                    errorMessage = null&#10;                }&#10;            },&#10;            errorMessage = errorMessage,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises.insertExercise&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.app.starker.R&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;import com.app.starker.presentation.common.view.TopBarView&#10;import com.app.starker.presentation.exercises.FormInsertExerciseView&#10;import com.app.starker.presentation.exercises.insertExercise.InsertExerciseViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun InsertExerciseScreen(&#10;    workoutId: String,&#10;    navHostController: NavHostController,&#10;    viewModel: InsertExerciseViewModel = hiltViewModel()&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;&#10;    // Navegação controlada pelo estado do ViewModel&#10;    LaunchedEffect(isNavigate) {&#10;        if (isNavigate) {&#10;            navHostController.popBackStack()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        TopBarView(navHostController)&#10;        FormInsertExerciseView(&#10;            text = stringResource(R.string.add_exercise_title),&#10;            name = name,&#10;            onNameChange = { name = it },&#10;            observation = observation,&#10;            onObservationChange = { observation = it },&#10;            imageUri = imageUri,&#10;            onPickImage = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;            onSave = {&#10;                if (name.isBlank() || observation.isBlank()) {&#10;                    errorMessage = stringResource(R.string.error_fill_all_fields)&#10;                } else {&#10;                    viewModel.createExerciseWithImage(&#10;                        workoutId = workoutId,&#10;                        exercise = ExerciseModel(&#10;                            name = name,&#10;                            observation = observation&#10;                        ),&#10;                        imageUri = imageUri!!,&#10;                        onResult = { id -&gt;&#10;                            if (id == null) {&#10;                                errorMessage = stringResource(R.string.error_insert_exercise)&#10;                            }&#10;                        }&#10;                    )&#10;                    errorMessage = null&#10;                }&#10;            },&#10;            errorMessage = errorMessage,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/updateExercise/UpdateExerciseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/updateExercise/UpdateExerciseScreen.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises.updateExercise&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.app.starker.presentation.exercises.FormInsertExerciseView&#10;import androidx.core.net.toUri&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;import com.app.starker.presentation.common.view.TopBarView&#10;&#10;@Composable&#10;fun UpdateExerciseScreen(&#10;  workoutId: String,&#10;  exerciseId: String,&#10;  navHostController: NavHostController&#10;) {&#10;    val viewModel: UpdateExerciseViewModel = hiltViewModel()&#10;    val exercise by viewModel.exercise.collectAsState()&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val newImageUri = if (imageUri?.toString()?.startsWith(&quot;http&quot;) == true) null else imageUri&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;    LaunchedEffect(workoutId) {&#10;        viewModel.getExerciseById(workoutId, exerciseId)&#10;    }&#10;    LaunchedEffect(isNavigate) {&#10;        if(isNavigate){&#10;            navHostController.popBackStack()&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(exercise) {&#10;        exercise?.let {&#10;            name = it.name&#10;            observation = it.observation&#10;            imageUri = it.image.toUri()&#10;        }&#10;    }&#10;&#10;    TopBarView(navHostController)&#10;    FormInsertExerciseView(&#10;        text = &quot;Atualizar Exercício&quot;,&#10;        name = name,&#10;        onNameChange = { name = it },&#10;        observation = observation,&#10;        onObservationChange = { observation = it },&#10;        imageUri = imageUri,&#10;        onPickImage = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;        onSave = {&#10;            if (name.isBlank() || observation.isBlank()) {&#10;                errorMessage = &quot;Erros: Preencha todos os campos.&quot;&#10;            } else if (exercise != null &amp;&amp;&#10;                name == exercise!!.name &amp;&amp;&#10;                observation == exercise!!.observation &amp;&amp;&#10;                imageUri?.toString() == exercise!!.image&#10;            ) {&#10;                errorMessage = &quot;Nenhuma alteração detectada.&quot;&#10;            } else {&#10;                viewModel.updateExercise(&#10;                    workoutId = workoutId,&#10;                    exerciseId = exerciseId,&#10;                    updatedName = name,&#10;                    updatedObservation = observation,&#10;                    updatedImage = newImageUri&#10;                )&#10;                errorMessage = null&#10;            }&#10;        },&#10;        errorMessage = errorMessage,&#10;        modifier = Modifier.fillMaxSize()&#10;    )&#10;    if(isLoading){&#10;        LoadingOverview()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises.updateExercise&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.app.starker.presentation.exercises.FormInsertExerciseView&#10;import androidx.core.net.toUri&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;import com.app.starker.presentation.common.view.TopBarView&#10;import com.app.starker.R&#10;&#10;@Composable&#10;fun UpdateExerciseScreen(&#10;  workoutId: String,&#10;  exerciseId: String,&#10;  navHostController: NavHostController&#10;) {&#10;    val viewModel: UpdateExerciseViewModel = hiltViewModel()&#10;    val exercise by viewModel.exercise.collectAsState()&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val newImageUri = if (imageUri?.toString()?.startsWith(&quot;http&quot;) == true) null else imageUri&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;    LaunchedEffect(workoutId) {&#10;        viewModel.getExerciseById(workoutId, exerciseId)&#10;    }&#10;    LaunchedEffect(isNavigate) {&#10;        if(isNavigate){&#10;            navHostController.popBackStack()&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(exercise) {&#10;        exercise?.let {&#10;            name = it.name&#10;            observation = it.observation&#10;            imageUri = it.image.toUri()&#10;        }&#10;    }&#10;&#10;    TopBarView(navHostController)&#10;    FormInsertExerciseView(&#10;        text = stringResource(R.string.update_exercise_title),&#10;        name = name,&#10;        onNameChange = { name = it },&#10;        observation = observation,&#10;        onObservationChange = { observation = it },&#10;        imageUri = imageUri,&#10;        onPickImage = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;        onSave = {&#10;            if (name.isBlank() || observation.isBlank()) {&#10;                errorMessage = stringResource(R.string.error_fill_all_fields)&#10;            } else if (exercise != null &amp;&amp;&#10;                name == exercise!!.name &amp;&amp;&#10;                observation == exercise!!.observation &amp;&amp;&#10;                imageUri?.toString() == exercise!!.image&#10;            ) {&#10;                errorMessage = stringResource(R.string.error_no_changes_detected)&#10;            } else {&#10;                viewModel.updateExercise(&#10;                    workoutId = workoutId,&#10;                    exerciseId = exerciseId,&#10;                    updatedName = name,&#10;                    updatedObservation = observation,&#10;                    updatedImage = newImageUri&#10;                )&#10;                errorMessage = null&#10;            }&#10;        },&#10;        errorMessage = errorMessage,&#10;        modifier = Modifier.fillMaxSize()&#10;    )&#10;    if(isLoading){&#10;        LoadingOverview()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/navigation/routes/exercise/ExerciseRoutes.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/navigation/routes/exercise/ExerciseRoutes.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.navigation.routes.exercise&#10;&#10;sealed class ExerciseRoutes(&#10;    val route: String&#10;) {&#10;    object InsertExercise : ExerciseRoutes(&quot;insert_exercise&quot;)&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.navigation.routes.exercise&#10;&#10;sealed class ExerciseRoutes(&#10;    val route: String&#10;) {&#10;    object InsertExercise : ExerciseRoutes(&quot;insert_exercise/{workoutId}&quot;) {&#10;        fun createRoute(workoutId: String) = &quot;insert_exercise/$workoutId&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/navigation/routes/exercise/NavExerciseRoutes.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/navigation/routes/exercise/NavExerciseRoutes.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.navigation.routes.exercise&#10;&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#10;import androidx.compose.animation.core.tween&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavGraphBuilder&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.composable&#10;import com.app.starker.presentation.exercises.ExerciseViewModel&#10;import com.app.starker.presentation.exercises.InsertExerciseScreen&#10;import com.app.starker.presentation.navigation.routes.auth.AuthRoutes&#10;import com.app.starker.presentation.navigation.routes.workout.WorkoutRoutes&#10;&#10;fun NavGraphBuilder.NavExerciseRoutes(navHostController: NavHostController) {&#10;&#10;    composable(&#10;        route = ExerciseRoutes.InsertExercise.route,&#10;        arguments = listOf(&#10;            androidx.navigation.navArgument(&quot;workoutId&quot;) {&#10;                type = androidx.navigation.NavType.StringType&#10;            }&#10;        ),&#10;        enterTransition = {&#10;            slideIntoContainer(&#10;                AnimatedContentTransitionScope.SlideDirection.Up,&#10;                tween(1000)&#10;            )&#10;        },&#10;        exitTransition = {&#10;            slideOutOfContainer(&#10;                AnimatedContentTransitionScope.SlideDirection.Down,&#10;                tween(1000)&#10;            )&#10;        }&#10;    ) { backStackEntry -&gt;&#10;        val workoutId = backStackEntry.arguments?.getString(&quot;workoutId&quot;) ?: &quot;&quot;&#10;        val viewModel: ExerciseViewModel = hiltViewModel()&#10;        InsertExerciseScreen(workoutId, {&#10;            navHostController.navigate(WorkoutRoutes.ShowWorkoutDetails.createRoute(workoutId)){&#10;                popUpTo(0) { inclusive = true }&#10;            }&#10;        }, viewModel)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.navigation.routes.exercise&#10;&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#10;import androidx.compose.animation.core.tween&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavGraphBuilder&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.composable&#10;import com.app.starker.presentation.exercises.ExerciseViewModel&#10;import com.app.starker.presentation.exercises.InsertExerciseScreen&#10;import com.app.starker.presentation.navigation.routes.auth.AuthRoutes&#10;import com.app.starker.presentation.navigation.routes.workout.WorkoutRoutes&#10;&#10;fun NavGraphBuilder.NavExerciseRoutes(navHostController: NavHostController) {&#10;&#10;    composable(&#10;        route = ExerciseRoutes.InsertExercise.route,&#10;        arguments = listOf(&#10;            androidx.navigation.navArgument(&quot;workoutId&quot;) {&#10;                type = androidx.navigation.NavType.StringType&#10;            }&#10;        ),&#10;        enterTransition = {&#10;            slideIntoContainer(&#10;                AnimatedContentTransitionScope.SlideDirection.Up,&#10;                tween(1000)&#10;            )&#10;        },&#10;        exitTransition = {&#10;            slideOutOfContainer(&#10;                AnimatedContentTransitionScope.SlideDirection.Down,&#10;                tween(1000)&#10;            )&#10;        }&#10;    ) { backStackEntry -&gt;&#10;        val workoutId = backStackEntry.arguments?.getString(&quot;workoutId&quot;) ?: &quot;&quot;&#10;        val viewModel: ExerciseViewModel = hiltViewModel()&#10;        InsertExerciseScreen(workoutId, {&#10;            repeat(2) { navHostController.popBackStack() }&#10;        }, viewModel)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/workouts/showWorkout/showWorkoutDetails/ExercisesView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/workouts/showWorkout/showWorkoutDetails/ExercisesView.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.workouts.showWorkout.showWorkoutDetails&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.Delete&#10;import androidx.compose.material.icons.outlined.Edit&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.app.starker.data.model.ExerciseModel&#10;&#10;@Composable&#10;fun ExercisesView(i: Int, exercise: List&lt;ExerciseModel&gt;, onEdit: (ExerciseModel) -&gt; Unit = {}, onDelete: (ExerciseModel) -&gt; Unit = {}) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(&#10;                top = if (i == 0) 50.dp else 20.dp,&#10;                bottom = if (i == exercise.size - 1) 124.dp else 4.dp,&#10;                start = 40.dp,&#10;                end = 40.dp&#10;            )&#10;            .height(70.dp)&#10;            .clip(RoundedCornerShape(80.dp))&#10;            .background(MaterialTheme.colorScheme.secondary)&#10;            .clickable {&#10;&#10;            }&#10;    ) {&#10;&#10;        AsyncImage(&#10;            model = exercise[i].image,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .height(130.dp)&#10;                .aspectRatio(1f)&#10;                .clip(CircleShape),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(top = 10.dp)&#10;            ) {&#10;                Text(&#10;                    exercise[i].name,&#10;                    color = MaterialTheme.colorScheme.background,&#10;                    modifier = Modifier.align(Alignment.CenterHorizontally)&#10;                )&#10;                Spacer(modifier = Modifier.height(5.dp))&#10;                Text(&#10;                    exercise[i].observation,&#10;                    color = MaterialTheme.colorScheme.background,&#10;                    modifier = Modifier.align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;&#10;        }&#10;        Icon(&#10;            imageVector = Icons.Outlined.Edit,&#10;            contentDescription = &quot;Editar exercício&quot;,&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, top = 32.dp)&#10;                .clickable { onEdit(exercise[i]) },&#10;            tint = MaterialTheme.colorScheme.primary&#10;        )&#10;        Icon(&#10;            imageVector = Icons.Outlined.Delete,&#10;            contentDescription = &quot;Deletar exercício&quot;,&#10;            modifier = Modifier&#10;                .padding(end = 32.dp, top = 32.dp)&#10;                .clickable { onDelete(exercise[i]) },&#10;            tint = Color.Red&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.workouts.showWorkout.showWorkoutDetails&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.Delete&#10;import androidx.compose.material.icons.outlined.Edit&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.app.starker.data.model.ExerciseModel&#10;&#10;@Composable&#10;fun ExercisesView(&#10;    i: Int,&#10;    exercise: List&lt;ExerciseModel&gt;,&#10;    onEdit: (ExerciseModel) -&gt; Unit = {},&#10;    onDelete: (ExerciseModel) -&gt; Unit = {}&#10;) {&#10;    val item = exercise[i]&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(&#10;                top = if (i == 0) 32.dp else 12.dp,&#10;                bottom = if (i == exercise.size - 1) 80.dp else 8.dp,&#10;                start = 24.dp,&#10;                end = 24.dp&#10;            ),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = CardDefaults.cardElevation(4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            AsyncImage(&#10;                model = item.image,&#10;                contentDescription = &quot;Imagem do exercício&quot;,&#10;                modifier = Modifier&#10;                    .size(64.dp)&#10;                    .clip(CircleShape)&#10;                    .background(MaterialTheme.colorScheme.secondaryContainer),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = item.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                if (item.observation.isNotBlank()) {&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = item.observation,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Icon(&#10;                imageVector = Icons.Outlined.Edit,&#10;                contentDescription = &quot;Editar exercício&quot;,&#10;                modifier = Modifier&#10;                    .size(28.dp)&#10;                    .clickable { onEdit(item) }&#10;                    .padding(4.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Icon(&#10;                imageVector = Icons.Outlined.Delete,&#10;                contentDescription = &quot;Deletar exercício&quot;,&#10;                modifier = Modifier&#10;                    .size(28.dp)&#10;                    .clickable { onDelete(item) }&#10;                    .padding(4.dp),&#10;                tint = MaterialTheme.colorScheme.error&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/workouts/showWorkout/showWorkoutDetails/ShowWorkoutDetailsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/workouts/showWorkout/showWorkoutDetails/ShowWorkoutDetailsScreen.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.workouts.showWorkout.showWorkoutDetails&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.outlined.Delete&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.app.starker.R&#10;import com.app.starker.presentation.common.utils.TransformTimestampInString&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;import com.app.starker.presentation.navigation.routes.exercise.ExerciseRoutes&#10;import com.app.starker.presentation.navigation.routes.workout.WorkoutRoutes&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ShowWorkoutDetailsScreen(navHostController: NavHostController, workoutId: String) {&#10;    val viewModel: ShowWorkoutDetailsViewModel = hiltViewModel()&#10;    val workoutById = viewModel.workoutById.collectAsState()&#10;    val exercises by viewModel.exercises.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    var isDeleteWorkout by remember { mutableStateOf(false) }&#10;    val hasError by viewModel.hasError.collectAsState()&#10;&#10;    LaunchedEffect(workoutId) {&#10;        if (workoutId.isNotEmpty()) {&#10;            viewModel.getWorkoutById(workoutId)&#10;            viewModel.getAllExercises(workoutId)&#10;        }&#10;    }&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.TopCenter)&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        workoutById.value?.name ?: &quot;Sem nome&quot;,&#10;                        modifier = Modifier.padding(start = 32.dp, top = 32.dp)&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background&#10;                ),&#10;                navigationIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = stringResource(R.string.back_button_description),&#10;                        modifier = Modifier&#10;                            .padding(start = 32.dp, top = 32.dp)&#10;                            .clickable {&#10;                                navHostController.popBackStack()&#10;                            }&#10;                    )&#10;                },&#10;                actions = {&#10;                    Icon(&#10;                        imageVector = Icons.Outlined.Delete,&#10;                        contentDescription = null,&#10;                        modifier = Modifier&#10;                            .padding(end = 32.dp, top = 32.dp)&#10;                            .clickable {&#10;                                isDeleteWorkout = true&#10;                            },&#10;                        tint = Color.Red&#10;                    )&#10;                },&#10;            )&#10;            Spacer(modifier = Modifier.height(50.dp))&#10;            Row(modifier = Modifier.align(Alignment.CenterHorizontally)) {&#10;                Text(&#10;                    workoutById.value?.description ?: &quot;Sem descrição&quot;,&#10;                    modifier = Modifier.padding(horizontal = 40.dp)&#10;                )&#10;                Icon(&#10;                    Icons.Filled.Edit,&#10;                    null,&#10;                    modifier = Modifier.clickable {&#10;                        val date = TransformTimestampInString().invoke(workoutById.value?.date)&#10;                        navHostController.navigate(&#10;                            WorkoutRoutes.UpdateWorkout.createRoute(&#10;                                workoutId,&#10;                                workoutById.value?.name ?: &quot;&quot;,&#10;                                workoutById.value?.description ?: &quot;&quot;,&#10;                                date&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;            Divider(&#10;                modifier = Modifier.padding(horizontal = 20.dp)&#10;            )&#10;            for (i in 0 until exercises.size) {&#10;                ExercisesView(i, exercises, onDelete = {&#10;                    viewModel.deleteExercise(workoutId, it.id)&#10;                }, onEdit = {&#10;                    navHostController.navigate(&#10;                        ExerciseRoutes.UpdateExercise.createRoute(&#10;                            workoutId,&#10;                            it.id&#10;                        )&#10;                    )&#10;                })&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                navHostController.navigate(&#10;                    ExerciseRoutes.InsertExercise.createRoute(workoutId)&#10;                )&#10;            }, modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(110.dp)&#10;                .padding(horizontal = 40.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(bottom = 50.dp),&#10;            shape = RoundedCornerShape(8.dp)&#10;        ) {&#10;            Text(&quot;Adicionar Exercício&quot;)&#10;        }&#10;        AlertDialogWorkoutDetails(&#10;            isDeleteWorkout = isDeleteWorkout,&#10;            onDeleteWorkout = {&#10;                viewModel.deleteWorkoutById(workoutId)&#10;                navHostController.navigate(WorkoutRoutes.ShowWorkout.route) {&#10;                    popUpTo(0) {&#10;                        inclusive = true&#10;                    }&#10;                }&#10;            },&#10;            hasError = hasError,&#10;            onHasError = {&#10;                viewModel.setHasError(it)&#10;            }&#10;        )&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.workouts.showWorkout.showWorkoutDetails&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.outlined.Delete&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.app.starker.R&#10;import com.app.starker.presentation.common.utils.TransformTimestampInString&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;import com.app.starker.presentation.navigation.routes.exercise.ExerciseRoutes&#10;import com.app.starker.presentation.navigation.routes.workout.WorkoutRoutes&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ShowWorkoutDetailsScreen(navHostController: NavHostController, workoutId: String) {&#10;    val viewModel: ShowWorkoutDetailsViewModel = hiltViewModel()&#10;    val workoutById = viewModel.workoutById.collectAsState()&#10;    val exercises by viewModel.exercises.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    var isDeleteWorkout by remember { mutableStateOf(false) }&#10;    val hasError by viewModel.hasError.collectAsState()&#10;&#10;    LaunchedEffect(workoutId) {&#10;        if (workoutId.isNotEmpty()) {&#10;            viewModel.getWorkoutById(workoutId)&#10;            viewModel.getAllExercises(workoutId)&#10;        }&#10;    }&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.TopCenter)&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        workoutById.value?.name ?: stringResource(R.string.no_name),&#10;                        modifier = Modifier.padding(start = 32.dp, top = 32.dp)&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background&#10;                ),&#10;                navigationIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = stringResource(R.string.back_button_description),&#10;                        modifier = Modifier&#10;                            .padding(start = 32.dp, top = 32.dp)&#10;                            .clickable {&#10;                                navHostController.popBackStack()&#10;                            }&#10;                    )&#10;                },&#10;                actions = {&#10;                    Icon(&#10;                        imageVector = Icons.Outlined.Delete,&#10;                        contentDescription = null,&#10;                        modifier = Modifier&#10;                            .padding(end = 32.dp, top = 32.dp)&#10;                            .clickable {&#10;                                isDeleteWorkout = true&#10;                            },&#10;                        tint = Color.Red&#10;                    )&#10;                },&#10;            )&#10;            Spacer(modifier = Modifier.height(50.dp))&#10;            Row(modifier = Modifier.align(Alignment.CenterHorizontally)) {&#10;                Text(&#10;                    workoutById.value?.description ?: stringResource(R.string.no_description),&#10;                    modifier = Modifier.padding(horizontal = 40.dp)&#10;                )&#10;                Icon(&#10;                    Icons.Filled.Edit,&#10;                    null,&#10;                    modifier = Modifier.clickable {&#10;                        val date = TransformTimestampInString().invoke(workoutById.value?.date)&#10;                        navHostController.navigate(&#10;                            WorkoutRoutes.UpdateWorkout.createRoute(&#10;                                workoutId,&#10;                                workoutById.value?.name ?: &quot;&quot;,&#10;                                workoutById.value?.description ?: &quot;&quot;,&#10;                                date&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;            Divider(&#10;                modifier = Modifier.padding(horizontal = 20.dp)&#10;            )&#10;            for (i in 0 until exercises.size) {&#10;                ExercisesView(i, exercises, onDelete = {&#10;                    viewModel.deleteExercise(workoutId, it.id)&#10;                }, onEdit = {&#10;                    navHostController.navigate(&#10;                        ExerciseRoutes.UpdateExercise.createRoute(&#10;                            workoutId,&#10;                            it.id&#10;                        )&#10;                    )&#10;                })&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                navHostController.navigate(&#10;                    ExerciseRoutes.InsertExercise.createRoute(workoutId)&#10;                )&#10;            }, modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(110.dp)&#10;                .padding(horizontal = 40.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(bottom = 50.dp),&#10;            shape = RoundedCornerShape(8.dp)&#10;        ) {&#10;            Text(stringResource(R.string.add_exercise))&#10;        }&#10;        AlertDialogWorkoutDetails(&#10;            isDeleteWorkout = isDeleteWorkout,&#10;            onDeleteWorkout = {&#10;                viewModel.deleteWorkoutById(workoutId)&#10;                navHostController.navigate(WorkoutRoutes.ShowWorkout.route) {&#10;                    popUpTo(0) {&#10;                        inclusive = true&#10;                    }&#10;                }&#10;            },&#10;            hasError = hasError,&#10;            onHasError = {&#10;                viewModel.setHasError(it)&#10;            }&#10;        )&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Starker&lt;/string&gt;&#10;&#10;    &lt;!--Register Screen --&gt;&#10;    &lt;string name=&quot;top_title_register&quot;&gt;Cadastrar&lt;/string&gt;&#10;    &lt;string name=&quot;username_placeholder&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;email_placeholder&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password_placeholder&quot;&gt;Senha&lt;/string&gt;&#10;    &lt;string name=&quot;text_button_register&quot;&gt;Registrar&lt;/string&gt;&#10;    &lt;string name=&quot;go_to_login&quot;&gt;Já tem conta? Entre por aqui&lt;/string&gt;&#10;&#10;    &lt;!-- Alert Dialogs - Register --&gt;&#10;    &lt;string name=&quot;error_title&quot;&gt;Erro&lt;/string&gt;&#10;    &lt;string name=&quot;error_generic&quot;&gt;Algo deu errado!!&lt;/string&gt;&#10;    &lt;string name=&quot;error_email_title&quot;&gt;Erro no email&lt;/string&gt;&#10;    &lt;string name=&quot;error_email_bad_format&quot;&gt;Email mal formatado!!&lt;/string&gt;&#10;    &lt;string name=&quot;error_empty_fields_title&quot;&gt;Campos vazios&lt;/string&gt;&#10;    &lt;string name=&quot;error_empty_fields_msg&quot;&gt;Preencha todos os campos!!&lt;/string&gt;&#10;    &lt;string name=&quot;error_email_exists_msg&quot;&gt;Esse email já existe!!&lt;/string&gt;&#10;&#10;    &lt;!-- Login Screen --&gt;&#10;    &lt;string name=&quot;login_title&quot;&gt;Entrar&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Esqueceu a senha?&lt;/string&gt;&#10;    &lt;string name=&quot;login_button&quot;&gt;Entrar&lt;/string&gt;&#10;    &lt;string name=&quot;back_button_description&quot;&gt;Voltar&lt;/string&gt;&#10;&#10;    &lt;!-- Alert Dialogs - Login --&gt;&#10;    &lt;string name=&quot;error_auth_invalid_msg&quot;&gt;Email ou senha não estão corretas!!&lt;/string&gt;&#10;&#10;    &lt;!-- Alert Dialogs - Workout Details --&gt;&#10;    &lt;string name=&quot;remove_workout&quot;&gt;Excluir&lt;/string&gt;&#10;    &lt;string name=&quot;do_you_wish_remove_thats_workout&quot;&gt;Você deseja deletar esse treino?&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_button_remove_workout&quot;&gt;Confirmar&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;workout_details_error&quot;&gt;Erro&lt;/string&gt;&#10;    &lt;string name=&quot;workout_details_text_error&quot;&gt;Aconteceu algum erro&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_button_erro_workout_details&quot;&gt;Ok&lt;/string&gt;&#10;&#10;    &lt;!-- General/Workout Details --&gt;&#10;    &lt;string name=&quot;no_name&quot;&gt;Sem nome&lt;/string&gt;&#10;    &lt;string name=&quot;no_description&quot;&gt;Sem descrição&lt;/string&gt;&#10;    &lt;string name=&quot;add_exercise&quot;&gt;Adicionar Exercício&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Starker&lt;/string&gt;&#10;&#10;    &lt;!--Register Screen --&gt;&#10;    &lt;string name=&quot;top_title_register&quot;&gt;Cadastrar&lt;/string&gt;&#10;    &lt;string name=&quot;username_placeholder&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;email_placeholder&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password_placeholder&quot;&gt;Senha&lt;/string&gt;&#10;    &lt;string name=&quot;text_button_register&quot;&gt;Registrar&lt;/string&gt;&#10;    &lt;string name=&quot;go_to_login&quot;&gt;Já tem conta? Entre por aqui&lt;/string&gt;&#10;&#10;    &lt;!-- Alert Dialogs - Register --&gt;&#10;    &lt;string name=&quot;error_title&quot;&gt;Erro&lt;/string&gt;&#10;    &lt;string name=&quot;error_generic&quot;&gt;Algo deu errado!!&lt;/string&gt;&#10;    &lt;string name=&quot;error_email_title&quot;&gt;Erro no email&lt;/string&gt;&#10;    &lt;string name=&quot;error_email_bad_format&quot;&gt;Email mal formatado!!&lt;/string&gt;&#10;    &lt;string name=&quot;error_empty_fields_title&quot;&gt;Campos vazios&lt;/string&gt;&#10;    &lt;string name=&quot;error_empty_fields_msg&quot;&gt;Preencha todos os campos!!&lt;/string&gt;&#10;    &lt;string name=&quot;error_email_exists_msg&quot;&gt;Esse email já existe!!&lt;/string&gt;&#10;&#10;    &lt;!-- Login Screen --&gt;&#10;    &lt;string name=&quot;login_title&quot;&gt;Entrar&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Esqueceu a senha?&lt;/string&gt;&#10;    &lt;string name=&quot;login_button&quot;&gt;Entrar&lt;/string&gt;&#10;    &lt;string name=&quot;back_button_description&quot;&gt;Voltar&lt;/string&gt;&#10;&#10;    &lt;!-- Alert Dialogs - Login --&gt;&#10;    &lt;string name=&quot;error_auth_invalid_msg&quot;&gt;Email ou senha não estão corretas!!&lt;/string&gt;&#10;&#10;    &lt;!-- Alert Dialogs - Workout Details --&gt;&#10;    &lt;string name=&quot;remove_workout&quot;&gt;Excluir&lt;/string&gt;&#10;    &lt;string name=&quot;do_you_wish_remove_thats_workout&quot;&gt;Você deseja deletar esse treino?&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_button_remove_workout&quot;&gt;Confirmar&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;workout_details_error&quot;&gt;Erro&lt;/string&gt;&#10;    &lt;string name=&quot;workout_details_text_error&quot;&gt;Aconteceu algum erro&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_button_erro_workout_details&quot;&gt;Ok&lt;/string&gt;&#10;&#10;    &lt;!-- General/Workout Details --&gt;&#10;    &lt;string name=&quot;no_name&quot;&gt;Sem nome&lt;/string&gt;&#10;    &lt;string name=&quot;no_description&quot;&gt;Sem descrição&lt;/string&gt;&#10;    &lt;string name=&quot;add_exercise&quot;&gt;Adicionar Exercício&lt;/string&gt;&#10;&#10;    &lt;!-- Exercise/Insert/Update --&gt;&#10;    &lt;string name=&quot;add_exercise_title&quot;&gt;Adicionar Exercício&lt;/string&gt;&#10;    &lt;string name=&quot;update_exercise_title&quot;&gt;Atualizar Exercício&lt;/string&gt;&#10;    &lt;string name=&quot;exercise_name_placeholder&quot;&gt;Nome do exercício&lt;/string&gt;&#10;    &lt;string name=&quot;exercise_observation_placeholder&quot;&gt;Observação&lt;/string&gt;&#10;    &lt;string name=&quot;select_image&quot;&gt;Selecionar Imagem&lt;/string&gt;&#10;    &lt;string name=&quot;save_exercise&quot;&gt;Salvar Exercício&lt;/string&gt;&#10;    &lt;string name=&quot;selected_image_content_description&quot;&gt;Imagem selecionada&lt;/string&gt;&#10;    &lt;string name=&quot;error_fill_all_fields&quot;&gt;Erros: Preencha todos os campos.&lt;/string&gt;&#10;    &lt;string name=&quot;error_insert_exercise&quot;&gt;Erro ao inserir exercício.&lt;/string&gt;&#10;    &lt;string name=&quot;error_no_changes_detected&quot;&gt;Nenhuma alteração detectada.&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>