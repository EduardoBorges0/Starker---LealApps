<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/ExerciseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/ExerciseViewModel.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.data.network.firebase.ExerciseNetwork&#10;import com.app.starker.domain.repositories.ExerciseRepositories&#10;import com.app.starker.domain.useCase.InsertWorkoutUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExerciseViewModel @Inject constructor(&#10;    private val exerciseRepositories: ExerciseRepositories,&#10;    private val insertWorkoutUseCase: InsertWorkoutUseCase&#10;) : ViewModel() {&#10;    private val _isImageError = MutableStateFlow&lt;Boolean&gt;(false)&#10;    val isImageError : StateFlow&lt;Boolean&gt; = _isImageError&#10;&#10;    private val _isNavigate = MutableStateFlow&lt;Boolean&gt;(false)&#10;    val isNavigate : StateFlow&lt;Boolean&gt; = _isNavigate&#10;&#10;    private val _isLoading = MutableStateFlow&lt;Boolean&gt;(false)&#10;    val isLoading : StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.deleteExercise(workoutId, exerciseId)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun editExercise(workoutId: String, exerciseId: String, updatedExercise: ExerciseModel) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getAllExercises(workoutId: String, onResult: (List&lt;ExerciseModel&gt;) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercises = exerciseRepositories.getAllExercises(workoutId)&#10;                onResult(exercises)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getExerciseById(workoutId: String, exerciseId: String, onResult: (ExerciseModel?) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercise = exerciseRepositories.getExerciseById(workoutId, exerciseId)&#10;                onResult(exercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createExerciseWithImage(&#10;        workoutId: String,&#10;        exercise: ExerciseModel,&#10;        imageUri: Uri,&#10;        onResult: (String?) -&gt; Unit&#10;    ) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exerciseId = exerciseRepositories.createExercise(workoutId, exercise.copy(image = &quot;&quot;))&#10;                if (exerciseId != null) {&#10;                    val imageUrl = exerciseRepositories.uploadExerciseImage(workoutId, exerciseId, imageUri)&#10;                    val updatedExercise = exercise.copy(id = exerciseId, image = imageUrl)&#10;                    exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;                    onResult(exerciseId)&#10;                } else {&#10;                    onResult(null)&#10;                }&#10;            } catch (e: Exception) {&#10;                onResult(null)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.data.network.firebase.ExerciseNetwork&#10;import com.app.starker.domain.repositories.ExerciseRepositories&#10;import com.app.starker.domain.useCase.InsertWorkoutUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExerciseViewModel @Inject constructor(&#10;    private val exerciseRepositories: ExerciseRepositories,&#10;    private val insertWorkoutUseCase: InsertWorkoutUseCase&#10;) : ViewModel() {&#10;    private val _isImageError = MutableStateFlow(false)&#10;    val isImageError: StateFlow&lt;Boolean&gt; = _isImageError&#10;&#10;    private val _isNavigate = MutableStateFlow(false)&#10;    val isNavigate: StateFlow&lt;Boolean&gt; = _isNavigate&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    fun deleteExercise(workoutId: String, exerciseId: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.deleteExercise(workoutId, exerciseId)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun editExercise(workoutId: String, exerciseId: String, updatedExercise: ExerciseModel) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getAllExercises(workoutId: String, onResult: (List&lt;ExerciseModel&gt;) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercises = exerciseRepositories.getAllExercises(workoutId)&#10;                onResult(exercises)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getExerciseById(workoutId: String, exerciseId: String, onResult: (ExerciseModel?) -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val exercise = exerciseRepositories.getExerciseById(workoutId, exerciseId)&#10;                onResult(exercise)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createExerciseWithImage(&#10;        workoutId: String,&#10;        exercise: ExerciseModel,&#10;        imageUri: Uri,&#10;        onResult: (String?) -&gt; Unit&#10;    ) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _isNavigate.value = false&#10;            try {&#10;                val exerciseId = exerciseRepositories.createExercise(workoutId, exercise.copy(image = &quot;&quot;))&#10;                if (exerciseId != null) {&#10;                    val imageUrl = exerciseRepositories.uploadExerciseImage(workoutId, exerciseId, imageUri)&#10;                    val updatedExercise = exercise.copy(id = exerciseId, image = imageUrl)&#10;                    exerciseRepositories.editExercise(workoutId, exerciseId, updatedExercise)&#10;                    _isNavigate.value = true&#10;                    onResult(exerciseId)&#10;                } else {&#10;                    _isNavigate.value = false&#10;                    onResult(null)&#10;                }&#10;            } catch (e: Exception) {&#10;                _isNavigate.value = false&#10;                onResult(null)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/InsertExerciseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/starker/presentation/exercises/InsertExerciseScreen.kt" />
              <option name="originalContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.app.starker.R&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.presentation.common.view.CustomTextField&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun InsertExerciseScreen(&#10;    workoutId: String,&#10;    onExerciseInserted: () -&gt; Unit,&#10;    viewModel: InsertExerciseViewModel = hiltViewModel()&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;&#10;    // Navegação controlada pelo estado do ViewModel&#10;    LaunchedEffect(isNavigate) {&#10;        if (isNavigate) {&#10;            onExerciseInserted()&#10;        }&#10;    }&#10;&#10;&#10;    InsertExerciseScreenContent(&#10;        name = name,&#10;        onNameChange = { name = it },&#10;        observation = observation,&#10;        onObservationChange = { observation = it },&#10;        imageUri = imageUri,&#10;        onPickImage = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;        onSave = {&#10;            if (name.isBlank() || imageUri == null) {&#10;                errorMessage = &quot;Preencha o nome e selecione uma imagem.&quot;&#10;                return@InsertExerciseScreenContent&#10;            }&#10;            errorMessage = null&#10;            viewModel.createExerciseWithImage(&#10;                workoutId = workoutId,&#10;                exercise = ExerciseModel(&#10;                    name = name,&#10;                    observation = observation&#10;                ),&#10;                imageUri = imageUri!!,&#10;                onResult = { id -&gt;&#10;                    if (id == null) {&#10;                        errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        errorMessage = errorMessage,&#10;        isLoading = isLoading,&#10;        onBack = onExerciseInserted&#10;    )&#10;}&#10;&#10;@Composable&#10;fun InsertExerciseScreenContent(&#10;    name: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    observation: String,&#10;    onObservationChange: (String) -&gt; Unit,&#10;    imageUri: Uri?,&#10;    onPickImage: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    errorMessage: String?,&#10;    isLoading: Boolean,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        TopAppBar(&#10;            title = {},&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.background&#10;            ),&#10;            navigationIcon = {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                    contentDescription = stringResource(R.string.back_button_description),&#10;                    modifier = Modifier&#10;                        .padding(start = 32.dp, top = 32.dp)&#10;                        .clickable { onBack() }&#10;                )&#10;            },&#10;            modifier = Modifier.background(Color.Blue)&#10;        )&#10;        FormInsertExerciseView(&#10;            name = name,&#10;            onNameChange = onNameChange,&#10;            observation = observation,&#10;            onObservationChange = onObservationChange,&#10;            imageUri = imageUri,&#10;            onPickImage = onPickImage,&#10;            onSave = onSave,&#10;            errorMessage = errorMessage&#10;        )&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FormInsertExerciseView(&#10;    name: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    observation: String,&#10;    onObservationChange: (String) -&gt; Unit,&#10;&#10;            CustomTextField(&#10;                value = name,&#10;                onValueChange = { name = it },&#10;                placeholder = &quot;Nome do exercício&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            CustomTextField(&#10;                value = observation,&#10;                onValueChange = { observation = it },&#10;                placeholder = &quot;Observação&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            Button(&#10;                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                modifier = Modifier.fillMaxWidth().padding(horizontal = 40.dp).height(60.dp),&#10;                shape = RoundedCornerShape(8.dp)&#10;            ) {&#10;                Text(&quot;Selecionar Imagem&quot;, color = MaterialTheme.colorScheme.secondary)&#10;            }&#10;&#10;            imageUri?.let {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(it),&#10;                    contentDescription = &quot;Imagem selecionada&quot;,&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                if (name.isBlank() || imageUri == null) {&#10;                    errorMessage = &quot;Preencha o nome e selecione uma imagem.&quot;&#10;                    return@Button&#10;                }&#10;                errorMessage = null&#10;                viewModel.createExerciseWithImage(&#10;                    workoutId = workoutId,&#10;                    exercise = ExerciseModel(&#10;                        name = name,&#10;                        observation = observation&#10;                    ),&#10;                    imageUri = imageUri!!,&#10;                    onResult = { id -&gt;&#10;                        if (id == null) {&#10;                            errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                        }else{&#10;&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(80.dp)&#10;                .align(Alignment.BottomCenter),&#10;            shape = RoundedCornerShape(0.dp)&#10;        ) {&#10;            Text(&quot;Salvar Exercício&quot;, color = MaterialTheme.colorScheme.secondary)&#10;        }&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;        if (isLoading) {&#10;            LoadingOverview()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.starker.presentation.exercises&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.app.starker.R&#10;import com.app.starker.data.model.ExerciseModel&#10;import com.app.starker.presentation.common.view.CustomTextField&#10;import com.app.starker.presentation.common.view.LoadingOverview&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun InsertExerciseScreen(&#10;    workoutId: String,&#10;    onExerciseInserted: () -&gt; Unit,&#10;    viewModel: InsertExerciseViewModel = hiltViewModel()&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var observation by remember { mutableStateOf(&quot;&quot;) }&#10;    var imageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val isNavigate by viewModel.isNavigate.collectAsState()&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        imageUri = uri&#10;    }&#10;&#10;    // Navegação controlada pelo estado do ViewModel&#10;    LaunchedEffect(isNavigate) {&#10;        if (isNavigate) {&#10;            onExerciseInserted()&#10;        }&#10;    }&#10;&#10;    if (isLoading) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 24.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Adicionar Exercício&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            CustomTextField(&#10;                value = name,&#10;                onValueChange = { name = it },&#10;                placeholder = &quot;Nome do exercício&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            CustomTextField(&#10;                value = observation,&#10;                onValueChange = { observation = it },&#10;                placeholder = &quot;Observação&quot;&#10;            )&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            Button(&#10;                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Selecionar Imagem&quot;)&#10;            }&#10;&#10;            imageUri?.let {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(it),&#10;                    contentDescription = &quot;Imagem selecionada&quot;,&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally)&#10;                )&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                if (name.isBlank() || imageUri == null) {&#10;                    errorMessage = &quot;Preencha o nome e selecione uma imagem.&quot;&#10;                    return@Button&#10;                }&#10;                errorMessage = null&#10;                viewModel.createExerciseWithImage(&#10;                    workoutId = workoutId,&#10;                    exercise = ExerciseModel(&#10;                        name = name,&#10;                        observation = observation&#10;                    ),&#10;                    imageUri = imageUri!!,&#10;                    onResult = { id -&gt;&#10;                        if (id == null) {&#10;                            errorMessage = &quot;Erro ao inserir exercício.&quot;&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(80.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = 24.dp, vertical = 24.dp)&#10;        ) {&#10;            Text(&quot;Salvar Exercício&quot;, color = MaterialTheme.colorScheme.secondary)&#10;        }&#10;&#10;        errorMessage?.let {&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 120.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = it,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>